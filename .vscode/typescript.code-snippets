{
  "Hook": {
    "prefix": "hook",
    "body": ["export default function ${TM_FILENAME_BASE}() {", "  $1", "  return {}", "}", ""],
    "description": "Hook"
  },
  "API": {
    "prefix": "api",
    "body": [
      "import { NextApiRequest, NextApiResponse } from 'next'",
      "import { isEmptyObject } from 'src/utils'",
      "",
      "import delete$1 from './sql/delete$1.sql'",
      "import get$1 from './sql/get$1.sql'",
      "import update$1 from './sql/update$1.sql'",
      "import { connection } from '..'",
      "",
      "export default async function handle$1(req: NextApiRequest, res: NextApiResponse) {",
      "  // Get $2",
      "  if (req.method === 'GET') {",
      "    const [rows] = await (await connection).query(get$1, [req.query.id])",
      "    return res.status(200).json({ rows })",
      "  }",
      "",
      "  // Update $2",
      "  if (req.method === 'PUT') {",
      "    if (isEmptyObject(req.body)) return res.status(400).send({ message: '값을 입력해주세요.' })",
      "",
      "    const [rows] = await (await connection).query(update$1, [req.query.id])",
      "    return res.status(200).json({ rows })",
      "  }",
      "",
      "  // Delete $2",
      "  if (req.method === 'DELETE') {",
      "    const [rows] = await (await connection).query(delete$1, [req.query.id])",
      "    return res.status(200).json({ rows })",
      "  }",
      "",
      "  // Else",
      "  return res.status(405).send({ message: 'Method not allowed' })",
      "}",
      ""
    ],
    "description": "Hook"
  }
}
